日志拦截
        1 使用切片
        2 使用拦截器
        3 使用过滤器



//拦截器3个方法的 调用时间和过程

afterCompletion  是视图渲染后执行  这个是进行资源清理作用  不管是否发生异常都会调用该方法

postHandle  在controller中发生异常的时候 不会调用该方法   视图渲染前执行该方法




//过滤器和拦截器的区别  Spring的拦截器与Servlet的Filter有相似之处，比如二者都是AOP编程思想的体现，都能实现权限检查、日志记录、请求地址参数检查等，不同的是




1   Filter是Servlet中定义的，所以只能用于Web程序中;
    拦截器Spring定义的，既可以用于Web程序中，也可以用于其他程序中（如Application、Swing）


2    拦截器是spring的一个组件 他可以注入 更好的使用spring 而过滤器是servlet依赖于servlet容器  无法获取spring更多的是吃


3   相同都是aop的思想,使用深度不同,filter只能在方法调用的前后执行,而拦截器可以在异常抛出后执行aftercompelete执行
    拦截器有个handler对象  可以获取到更多的信息

4   过滤器可以跳转到  可以中断return    拦截器可以return False


5   拦截器到handler 只能拿到方法名  类名 看不到调用参数的值   如果要获取参数的值 则要使用切片




切片使用

    使用Spring MVC 开发Restful  API






切片就是一个类

    1  切入点  注解   在那些方法其作用  在什么时候起作用（前,后）

    2  增强   方法  执行的逻辑












//filter 无法拿到方法信息   但是无法拿到参数的值


//切片  无法拿到http请求的那个对象


// filter - 拦截器 - 切片  -controller

// 返回给用户处理-过滤器处理-拦截器处理-controllerAdvice -如果出异常了

