# springSecurity

        功能   1 认证
              2 授权
              3 攻击防护



基本原理

        //换成表单登录

        没有配置的时候   默认会给你一个httpbasic 登录  对所有对请求默认都会拦截

        spring Security 最后的一个橙色的方块   绿色过滤器   最后一个过滤器如果没过 会抛出一个异常


        //UsernamePasswordAuthenticationFilter 是用来尝试认证  首选判断是不是post 有没有userName passWord 有的话就过这个过滤器 没有就放行

        绿色的过滤器都是可以 通过配置 设置是否存在 是否取消的
        橙色（FilterSecurityInterceptor）：
        请求经过了绿色的过滤器之后，到达了该过滤器，该过滤器是整个过滤器链的最后一环，该过滤器决定了当前的请求能不能访问后面真正的服务。判断依据：
        .anyRequest()//任何请求
        .authenticated();//都需要身份认证




        蓝色（Exception Translation Filter）：
        该过滤器的作用是用来捕获后面的过滤器所抛出来的异常；会根据抛出来的异常作相应的处理，比如因为没有登录不能访问，则会根据绿色的过滤器的配置引导用户去登录，比如前面配的是UsernamePasswordAuthenticationFilter，则会把用户引导到一个登录页面中去；前面配的是Basic Authentication Filter，那么就会在浏览器弹出一个窗口，要用户输入用户名和密码。
        注意：绿色的过滤器时可以通过配置来决定某一个过滤器是否生效的，其他的都是不能控制的，一定会在过滤器链并且在指定的位置上。




        userNamePassWordAuthenticationFilter   这个是获取用户密码

        BasicAuthticationFilter

        ExceptionTranslation Filter

        FiterSecurityInteceptor






/***************spring security 自定义用户信息获取逻辑*******************/



UserDtailsService  实现接口   成功后会放入session


登录  然后可以设置 账户锁定  密码过期

密码加密








spring security 自定义登录页面


1  自定义登录页面

2  自定义登录成功处理

3  自定义登录失败处理


一个问题  如果登录错误  不应该返回html 应该返回json


https://blog.csdn.net/libertine1993/article/details/80765886


spring security 如果不配置就会报错  @value 不配置就会报错













//登录成功  登录失败

  这个要看你是登录成功 还是登录失败的情况   默认是跳转  现在的是前后端分离的设计中   一般不用这种情况

  自定义登录成功 实现接口  然后配置config





***********************************************************************************

spring security 源码阅读




--SecurityContextPersistenceFilter    请求 是把session放入线程   响应是把线程放入Session里面去

userNamePassWordAuthenticationFilter


//spring security的token是存储在数据库中的



//remember me authentication filter 记住我过滤器 判断前面是否已经认证过了  如果没有认证 那就从数据库读取token 然后校验





短信验证码


        问题1   spirng security 图片验证码 必须用过滤器吗    感觉不用也可以啊 在登录的时候去判断下就ok了? 一会测试下 ok不ok

        spring boot 依赖搜索



        filter  token  provider  这三个






基于短信验证码的方式 认证  表单认证




1  第三方认证  spring security  开发第三方登录


Oauth协议              就是用用户的令牌   去访问   2令牌有有效期








provider 服务器提供商   提供令牌   wx

resource Owner     资源所有者

第三方应用 Client







客户授权  这种模式



spring social 开发


authentication 放入srpign security里面  就相当于已经登录过了


/////////授权码模式  实现了




spring security  session 超时管理


spring session 并发控制


session 集群管理


spring  boot的 session 失效  最少是1分钟  是60的倍数




SpringBoot2.0以后的版本只需要在application.properties中加入以下配置就好
server.servlet.session.timeout = PT5H


spring boot 2.0  开发






// spring boot 实现负载均衡  分布式系统  使用redis做分布式部署


springSessionRepositoryFilter  这个来做集群




spring boot 退出登录






// app cookie 比较繁琐    如小程序 根本不支持cookie




// 安全性 和用户体验    token令牌




